//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0-beta.6'.
//
package com.valoy.events.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.IntAdapter
import com.apollographql.apollo3.api.StringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.list
import com.apollographql.apollo3.api.missingField
import com.apollographql.apollo3.api.obj
import com.valoy.events.GetAllUsersQuery
import kotlin.Int
import kotlin.String
import kotlin.Suppress
import kotlin.collections.List

public object GetAllUsersQuery_ResponseAdapter {
  public object Data : Adapter<GetAllUsersQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("getAllUsers")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetAllUsersQuery.Data {
      var _getAllUsers: List<GetAllUsersQuery.GetAllUser>? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _getAllUsers = GetAllUser.obj().list().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetAllUsersQuery.Data(
        getAllUsers = _getAllUsers ?: missingField(reader, "getAllUsers")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetAllUsersQuery.Data,
    ) {
      writer.name("getAllUsers")
      GetAllUser.obj().list().toJson(writer, customScalarAdapters, value.getAllUsers)
    }
  }

  public object GetAllUser : Adapter<GetAllUsersQuery.GetAllUser> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "name", "lastname", "email")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetAllUsersQuery.GetAllUser {
      var _id: Int? = null
      var _name: String? = null
      var _lastname: String? = null
      var _email: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = IntAdapter.fromJson(reader, customScalarAdapters)
          1 -> _name = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _lastname = StringAdapter.fromJson(reader, customScalarAdapters)
          3 -> _email = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetAllUsersQuery.GetAllUser(
        id = _id ?: missingField(reader, "id"),
        name = _name ?: missingField(reader, "name"),
        lastname = _lastname ?: missingField(reader, "lastname"),
        email = _email ?: missingField(reader, "email")
      )
    }

    @Suppress("DEPRECATION")
    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetAllUsersQuery.GetAllUser,
    ) {
      writer.name("id")
      IntAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("name")
      StringAdapter.toJson(writer, customScalarAdapters, value.name)

      writer.name("lastname")
      StringAdapter.toJson(writer, customScalarAdapters, value.lastname)

      writer.name("email")
      StringAdapter.toJson(writer, customScalarAdapters, value.email)
    }
  }
}
